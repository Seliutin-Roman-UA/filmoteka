{"mappings":"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","sources":["src/js/fetch.js","src/js/createpagination.js","src/js/main.js","src/js/murkup.js","src/index.js"],"sourcesContent":["export async function getTOPmedia(i) {\n  try {\n    const response = await fetch(\n      `https://api.themoviedb.org/3/trending/all/day?api_key=09fddff29ca445d38e447ae99342142f&page=${i}`\n    );\n    const data = await response.json();\n    return data;\n  } catch (arror) {\n    console.log('i am so sorry', arror.message);\n  }\n}\nexport  function throwQuery (str) {\n return async function  getMediaByString (i) {try {\n    const response = await fetch(\n      `https://api.themoviedb.org/3/search/movie?api_key=09fddff29ca445d38e447ae99342142f&page=${i}&query=${str}`\n    );\n    const data = await response.json();\n   return {\n     total_pages: data.total_pages,\n     results: data.results.map(el => ({ ...el, media_type: 'movie' })),\n   };\n  } catch (arror) {\n    console.log('i am so sorry', arror.message);\n  }\n}}\n\nexport async function getGenre(type) {\n  let url = '';\n  if (type === 'movie')\n    url = `https://api.themoviedb.org/3/genre/movie/list?api_key=09fddff29ca445d38e447ae99342142f&language=en-US`;\n  if (type === 'tv')\n    url = `https://api.themoviedb.org/3/genre/tv/list?api_key=09fddff29ca445d38e447ae99342142f&language=en-US`;\n  try {\n    const response = await fetch(url);\n    const data = await response.json();\n    const g = {};\n    data.genres.forEach(el => (g[el.id] = el.name));\n    return g;\n  } catch (arror) {\n    console.log('i am so sorry', arror.message);\n  }\n}\n","import { session, ref } from './main';\n\nexport function bildPagination() {\n  let stringHTML = '';\n  if (session.pagination.arrowLeft === 0) {\n    stringHTML += `<span class=\"pag_arrowleft grey\">\n                    <svg class=\"btn__icon\">\n                      <use href=\"#arrowleft\"></use>\n                    </svg></span>`;\n  } else {\n    stringHTML += `<span class=\"pag_arrowleft\">\n                    <svg class=\"btn__icon\">\n                      <use href=\"#arrowleft\"></use>\n                    </svg></span>`;\n  }\n\n  if (session.pagination.buttonStart === 1) {\n    stringHTML += `<span class=\"pag_block\" data-page=\"1\">1</span>`;\n  }\n  \n  if (session.pagination.gapLeft === 1) {\n    stringHTML += `<span class=\"pag_dots\">...</span>`;\n  }\n  \n  session.pagination.button.forEach((el, index) => {\n    \n    if (el === 1) {\n      if (index + 1 === Number(session.currentPage)) {\n        stringHTML += `<span class=\"pag_block active\" data-page=\"${\n          index + 1\n        }\">${index + 1}</span>`;\n      } else {\n        stringHTML += `<span class=\"pag_block \" data-page=\"${index + 1}\">${\n          index + 1\n        }</span>`;\n      }\n    }\n\n  });\n\n  if (session.pagination.gapRight === 1) {\n    stringHTML += `<span class=\"pag_dots\">...</span>`;\n  }\n\n  if (session.pagination.buttonFinish === 1) {\n    stringHTML += `<span class=\"pag_block\" data-page=\"${session.totalPages}\">${session.totalPages}</span>`;\n  }\n\n  if (session.pagination.arrowRight === 0) {\n    stringHTML += `<span class=\"pag_arrowright grey\">\n                    <svg class=\"btn__icon\">\n                      <use href=\"#arrowright\"></use>\n                    </svg></span>`;\n  } else {\n    stringHTML += `<span class=\"pag_arrowright\">\n                    <svg class=\"btn__icon\">\n                      <use href=\"#arrowright\"></use>\n                    </svg></span>`;\n  }\n \n  ref.pagination.innerHTML = stringHTML;\n\n  document.querySelector('.pag_arrowleft').addEventListener('click', () => {\n    session.changeCurrentPage(session.currentPage - 1);\n  });\n  document.querySelector('.pag_arrowright').addEventListener('click', () => {\n    session.changeCurrentPage(session.currentPage + 1);\n  });\n  document.querySelectorAll('.pag_block').forEach(el => {\n    el.addEventListener('click', e => {\n      console.log(e.target.dataset.page);\n      session.changeCurrentPage(e.target.dataset.page)\n    });\n  });\n}\n","import { getTOPmedia, getGenre, throwQuery } from './fetch.js';\nimport { murkupcards } from './murkup';\nimport { bildPagination } from './createpagination.js';\n\nexport const session = {\n  currentPage: 1,\n  totalPages: 1,\n  pagination: {\n    arrowLeft: null,\n    buttonStart: null,\n    gapLeft: null,\n    button: [],\n    gapRight: null,\n    buttonFinish: null,\n    arrowRight: null,\n  },\n  query: null,\n\n  fillpaginationButton() {\n    numberPage = this.currentPage - 1;\n    totalPages = this.totalPages - 1;\n    console.log('строим по индексу', numberPage);\n    let min, max;\n\n    if (this.totalPages < 5) {\n      for (i = 0; i <= totalPages; i++) this.pagination.button[i] = 1;\n      this.pagination.arrowLeft = 0;\n      this.pagination.buttonStart = 0;\n      this.pagination.gapLeft = 0;\n      this.pagination.gapRight = 0;\n      this.pagination.buttonFinish = 0;\n      this.pagination.arrowRight = 0;\n      return;\n    }\n    min = numberPage - 2;\n    max = numberPage + 2;\n    if (numberPage < 3) {\n      min = 0;\n      max = 4;\n    }\n    if (totalPages - numberPage < 3) {\n      min = totalPages - 4;\n      max = totalPages;\n    }\n\n    for (i = 0; i <= totalPages; i++) {\n      this.pagination.button[i] = 0;\n      if (i >= min && i <= max) this.pagination.button[i] = 1;\n    }\n    this.pagination.arrowLeft = numberPage > 0 ? 1 : 0;\n    this.pagination.buttonStart = min >= 2 ? 1 : 0;\n    this.pagination.gapLeft = min >= 1 ? 1 : 0;\n    this.pagination.gapRight = totalPages - max > 0 ? 1 : 0;\n    this.pagination.buttonFinish = totalPages - max <= 1 ? 0 : 1;\n    this.pagination.arrowRight = max < totalPages ? 1 : 0;\n  },\n  async changeCurrentPage(number) {\n    const numberPage = Number(number);\n    if (numberPage < 1) {\n      return 'reject';\n    }\n    if (numberPage > this.totalPages) {\n      return 'reject';\n    }\n    this.currentPage = numberPage;\n    const PageData = await this.query(numberPage);\n    session.totalPages = PageData.total_pages;\n    this.fillpaginationButton();\n    murkupcards(PageData.results);\n    bildPagination();\n  },\n};\n\nexport let genresMovie = {};\nexport let genresTV = {};\nexport const ref = {\n  gallary: document.querySelector('.gallery'),\n  pagination: document.querySelector('.pagination'),\n  searchForm: document.querySelector('.searchform'),\n};\n// block functions\n\nasync function firstPage() {\n  genresMovie = await getGenre('movie');\n  genresTV = await getGenre('tv');\n  session.query = getTOPmedia;\n  session.changeCurrentPage(1);\n}\nfunction onSubmitSearchForm(e) {\n  e.preventDefault();\n  session.query = throwQuery(e.currentTarget.elements['string'].value);\n  session.changeCurrentPage(1);\n}\n\nref.searchForm.addEventListener('submit', onSubmitSearchForm);\n\nconsole.log('Hello MAIN');\nfirstPage();\n// const foo = throwQuery('dragon');\n// foo('1').then(data => console.log('data', data));\n","import { ref, genresMovie, genresTV } from './main';\n\nexport function murkupcards(dataArray) {\n\n  ref.gallary.innerHTML = dataArray\n    .map(el => {\n      let genres = '';\n      switch (el.media_type) {\n        case 'movie':\n          genres =\n            el.genre_ids.length === 0\n              ? ''\n              : el.genre_ids.map(el => genresMovie[el]).join(', ');\n          return ` <li class=\"card\" data-id=\"${el.id}\" data-media_type=\"${\n            el.media_type\n          }\">\n            <img class=\"card__img\" src=\"${\n              el.poster_path\n                ? `https://image.tmdb.org/t/p/w500${el.poster_path}`\n                : `./noimage.c59940df.jpg`\n            }\" alt=\"poster\">\n            <p class=\"card__name\">${el.title}</p>\n            <p class=\"card__info\"><span class=\"card__ganre\">${genres} |</span>\n            <span>${\n              el.release_date ? el.release_date.slice(0, 4) : 'unknown'\n            }</span>\n            <span class=\"card__rating\"> ${\n              el.popularity ? el.popularity.toFixed(1) : 'unknown'\n            }</span></p>\n            </li>`;\n        case 'tv':\n          genres =\n            el.genre_ids.length === 0\n              ? ''\n              : (el.genres = el.genre_ids.map(el => genresTV[el]).join(', '));\n          return ` <li class=\"card\" data-id=\"${el.id} data-media_type=\"${\n            el.media_type\n          }\">\n            <img class=\"card__img\" src=\"${\n              el.poster_path\n                ? `https://image.tmdb.org/t/p/w500${el.poster_path}`\n                : `./noimage.c59940df.jpg`\n            }\" alt=\"poster\">\n            <p class=\"card__name\">${el.name}</p>\n            <p class=\"card__info\"><span class=\"card__ganre\">${genres} |</span>\n            <span>${\n              el.first_air_date ? el.first_air_date.slice(0, 4) : 'unknown'\n            }</span>\n            <span class=\"card__rating\"> ${\n              el.popularity ? el.popularity.toFixed(1) : 'unknown'\n            }</span></p>\n            </li>`;\n        case 'person':\n          return ` <li class=\"card\">\n            <img class=\"card__img\" src=\"${\n              el.profile_path\n                ? `https://image.tmdb.org/t/p/w500${el.profile_path}`\n                : `./noimage.c59940df.jpg`\n            }\" alt=\"poster\">\n            <p class=\"card__name\">${el.name}</p>\n            <p class=\"card__info\"><span class=\"card__ganre\">person |</span>\n                 <span class=\"card__rating\"> ${\n                   el.popularity ? el.popularity.toFixed(1) : 'unknown'\n                 }</span></p>\n            </li>`;\n\n        default:\n          break;\n      }\n    })\n    .join('');\n  \n}\n","import \"../src/js/main.js\"\nconsole.log(\"Hello INDEX\")"],"names":["async","$924b66e829bc1184$export$5d11e7c010393a4c","i","response","fetch","json","arror","console","log","message","$924b66e829bc1184$export$11ff5302ebb1cd30","type","url","data","g","genres","forEach","el","id","name","$10dc1ca6c751da07$export$e0d58dc74aba9051","stringHTML","$d706c914d748cb55$export$55427e926be628d4","pagination","arrowLeft","buttonStart","gapLeft","button","index","Number","currentPage","gapRight","buttonFinish","totalPages","arrowRight","$d706c914d748cb55$export$eff4d24c3ff7876e","innerHTML","document","querySelector","addEventListener","changeCurrentPage","querySelectorAll","e","target","dataset","page","query","fillpaginationButton","min","max","numberPage","this","number","PageData","dataArray","total_pages","results","gallary","map","el1","media_type","genre_ids","length","$d706c914d748cb55$export$cdaef723ec2b8768","join","poster_path","title","release_date","slice","popularity","toFixed","$d706c914d748cb55$export$93b214f8fd75e4c2","first_air_date","profile_path","searchForm","str","preventDefault","currentTarget","elements","value","$d706c914d748cb55$var$firstPage"],"version":3,"file":"index.d5fc6841.js.map"}